{"/Users/jie.hou/routing-api/lib/rpc/HealthStateSyncer.ts":{"path":"/Users/jie.hou/routing-api/lib/rpc/HealthStateSyncer.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":36}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":39}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":30}},"5":{"start":{"line":9,"column":31},"end":{"line":9,"column":76}},"6":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"7":{"start":{"line":11,"column":12},"end":{"line":11,"column":95}},"8":{"start":{"line":13,"column":8},"end":{"line":13,"column":42}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":65}},"10":{"start":{"line":15,"column":8},"end":{"line":15,"column":37}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":53}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":23}},"13":{"start":{"line":21,"column":8},"end":{"line":24,"column":41}},"14":{"start":{"line":25,"column":30},"end":{"line":25,"column":40}},"15":{"start":{"line":26,"column":8},"end":{"line":28,"column":9}},"16":{"start":{"line":27,"column":12},"end":{"line":27,"column":68}},"17":{"start":{"line":29,"column":25},"end":{"line":29,"column":29}},"18":{"start":{"line":30,"column":8},"end":{"line":35,"column":9}},"19":{"start":{"line":31,"column":12},"end":{"line":31,"column":60}},"20":{"start":{"line":34,"column":12},"end":{"line":34,"column":91}},"21":{"start":{"line":36,"column":8},"end":{"line":36,"column":39}},"22":{"start":{"line":37,"column":31},"end":{"line":37,"column":117}},"23":{"start":{"line":38,"column":33},"end":{"line":38,"column":82}},"24":{"start":{"line":39,"column":8},"end":{"line":47,"column":9}},"25":{"start":{"line":40,"column":12},"end":{"line":40,"column":93}},"26":{"start":{"line":41,"column":12},"end":{"line":41,"column":55}},"27":{"start":{"line":42,"column":12},"end":{"line":42,"column":65}},"28":{"start":{"line":45,"column":12},"end":{"line":45,"column":90}},"29":{"start":{"line":46,"column":12},"end":{"line":46,"column":68}},"30":{"start":{"line":50,"column":26},"end":{"line":53,"column":9}},"31":{"start":{"line":54,"column":8},"end":{"line":70,"column":9}},"32":{"start":{"line":55,"column":27},"end":{"line":55,"column":72}},"33":{"start":{"line":56,"column":25},"end":{"line":56,"column":36}},"34":{"start":{"line":57,"column":12},"end":{"line":60,"column":13}},"35":{"start":{"line":58,"column":16},"end":{"line":58,"column":78}},"36":{"start":{"line":59,"column":16},"end":{"line":59,"column":28}},"37":{"start":{"line":61,"column":12},"end":{"line":64,"column":13}},"38":{"start":{"line":62,"column":16},"end":{"line":62,"column":101}},"39":{"start":{"line":63,"column":16},"end":{"line":63,"column":28}},"40":{"start":{"line":65,"column":12},"end":{"line":65,"column":84}},"41":{"start":{"line":68,"column":12},"end":{"line":68,"column":92}},"42":{"start":{"line":69,"column":12},"end":{"line":69,"column":24}},"43":{"start":{"line":73,"column":8},"end":{"line":73,"column":67}},"44":{"start":{"line":74,"column":20},"end":{"line":74,"column":74}},"45":{"start":{"line":76,"column":8},"end":{"line":110,"column":9}},"46":{"start":{"line":77,"column":30},"end":{"line":85,"column":13}},"47":{"start":{"line":86,"column":12},"end":{"line":86,"column":59}},"48":{"start":{"line":89,"column":12},"end":{"line":108,"column":14}},"49":{"start":{"line":109,"column":12},"end":{"line":109,"column":65}},"50":{"start":{"line":113,"column":0},"end":{"line":113,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":53},"end":{"line":18,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":77},"end":{"line":48,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":34},"end":{"line":71,"column":5}},"line":49},"3":{"name":"(anonymous_3)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":74},"end":{"line":111,"column":5}},"line":72}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},{"start":{"line":10,"column":8},"end":{"line":12,"column":9}}],"line":10},"1":{"loc":{"start":{"line":26,"column":8},"end":{"line":28,"column":9}},"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":28,"column":9}},{"start":{"line":26,"column":8},"end":{"line":28,"column":9}}],"line":26},"2":{"loc":{"start":{"line":37,"column":31},"end":{"line":37,"column":117}},"type":"cond-expr","locations":[{"start":{"line":37,"column":53},"end":{"line":37,"column":69}},{"start":{"line":37,"column":72},"end":{"line":37,"column":117}}],"line":37},"3":{"loc":{"start":{"line":38,"column":33},"end":{"line":38,"column":82}},"type":"cond-expr","locations":[{"start":{"line":38,"column":54},"end":{"line":38,"column":55}},{"start":{"line":38,"column":58},"end":{"line":38,"column":82}}],"line":38},"4":{"loc":{"start":{"line":57,"column":12},"end":{"line":60,"column":13}},"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":60,"column":13}},{"start":{"line":57,"column":12},"end":{"line":60,"column":13}}],"line":57},"5":{"loc":{"start":{"line":61,"column":12},"end":{"line":64,"column":13}},"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":64,"column":13}},{"start":{"line":61,"column":12},"end":{"line":64,"column":13}}],"line":61},"6":{"loc":{"start":{"line":76,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":110,"column":9}},{"start":{"line":76,"column":8},"end":{"line":110,"column":9}}],"line":76}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":1,"32":1,"33":1,"34":1,"35":0,"36":0,"37":1,"38":1,"39":1,"40":0,"41":0,"42":0,"43":1,"44":1,"45":1,"46":1,"47":1,"48":0,"49":0,"50":1},"f":{"0":1,"1":0,"2":1,"3":1},"b":{"0":[0,1],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,1],"5":[1,0],"6":[1,0]},"inputSourceMap":{"version":3,"file":"/Users/jie.hou/routing-api/lib/rpc/HealthStateSyncer.ts","sources":["/Users/jie.hou/routing-api/lib/rpc/HealthStateSyncer.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamoDB } from 'aws-sdk'\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb'\nimport Logger from 'bunyan'\n\nexport interface SyncResult {\n  synced: boolean\n  healthScore: number\n}\n\ninterface ReadResult {\n  healthScore: number\n  updatedAtInMs: number\n}\n\nexport class HealthStateSyncer {\n  private readonly providerId: string\n  private readonly dbTableName: string\n  private ddbClient: DocumentClient\n  private lastSyncTimestampInMs: number = 0\n  private sync_interval_in_s: number\n  private readonly DB_TTL_IN_S = 30\n  private log: Logger\n\n  constructor(providerId: string, sync_interval_in_s: number, log: Logger) {\n    const dbTableNameStr = process.env['RPC_PROVIDER_HEALTH_TABLE_NAME']!\n    if (dbTableNameStr === undefined) {\n      throw new Error('Environment variable RPC_PROVIDER_HEALTH_TABLE_NAME is missing!')\n    }\n\n    this.dbTableName = dbTableNameStr\n    this.ddbClient = new DynamoDB.DocumentClient()\n    this.providerId = providerId\n    this.sync_interval_in_s = sync_interval_in_s\n    this.log = log\n  }\n\n  async maybeSyncHealthScoreWithDb(localHealthScoreDiff: number, localHealthScore: number): Promise<SyncResult> {\n    // TODO(jie): Reduce the amount of debug logging?\n    this.log.debug(\n      {\n        localHealthScore,\n        localHealthScoreDiff,\n      },\n      'maybeSyncHealthScoreWithDB'\n    )\n    const timestampInMs = Date.now()\n    if (timestampInMs - this.lastSyncTimestampInMs < 1000 * this.sync_interval_in_s) {\n      return { synced: false, healthScore: localHealthScore }\n    }\n\n    let readResult: ReadResult | null = null\n    try {\n      readResult = await this.readHealthScoreFromDb()\n    } catch (err: any) {\n      this.log.error(`Failed to read from DB: ${JSON.stringify(err)}. Sync failed.`)\n    }\n    this.log.debug({ readResult })\n\n    const newHealthScore = readResult === null ? localHealthScore : readResult.healthScore + localHealthScoreDiff\n    const oldUpdatedAtInMs = readResult == null ? 0 : readResult.updatedAtInMs\n    try {\n      await this.writeHealthScoreToDb(newHealthScore, oldUpdatedAtInMs, timestampInMs)\n      this.lastSyncTimestampInMs = timestampInMs\n      return { synced: true, healthScore: newHealthScore }\n    } catch (err: any) {\n      this.log.error(`Failed to write to DB: ${JSON.stringify(err)}. Sync failed.`)\n      return { synced: false, healthScore: localHealthScore }\n    }\n  }\n\n  private async readHealthScoreFromDb(): Promise<ReadResult | null> {\n    const getParams = {\n      TableName: this.dbTableName,\n      Key: { chainIdProviderName: this.providerId },\n    }\n    try {\n      const result = await this.ddbClient.get(getParams).promise()\n      const item = result.Item\n      if (item === undefined) {\n        this.log.info(`No health score found for ${this.providerId}`)\n        return null\n      }\n      if (item.ttl < Math.floor(Date.now() / 1000)) {\n        this.log.info(`Health score has expired: TTL at ${item.ttl} for ${this.providerId}`)\n        return null\n      }\n      return { healthScore: item.healthScore, updatedAtInMs: item.updatedAt }\n    } catch (error: any) {\n      this.log.error(`Failed to read health score from DB: ${JSON.stringify(error)}`)\n      throw error\n    }\n  }\n\n  private writeHealthScoreToDb(healthScore: number, oldUpdatedAtInMs: number, newUpdatedAtInMs: number) {\n    this.log.debug(`Write health score to DB: ${healthScore}`)\n    const ttl = Math.floor(newUpdatedAtInMs / 1000) + this.DB_TTL_IN_S\n    let updateParams: DocumentClient.UpdateItemInput\n    if (oldUpdatedAtInMs === 0) {\n      const putParams = {\n        TableName: this.dbTableName,\n        Item: {\n          chainIdProviderName: this.providerId,\n          healthScore: healthScore,\n          updatedAt: newUpdatedAtInMs,\n          ttl: ttl,\n        },\n      }\n      return this.ddbClient.put(putParams).promise()\n    } else {\n      updateParams = {\n        TableName: this.dbTableName,\n        Key: { chainIdProviderName: this.providerId },\n        UpdateExpression: `SET \n          #healthScore = :healthScore,\n          #updatedAt = :newUpdatedAtInMs,\n          #ttl = :ttl`,\n        ExpressionAttributeNames: {\n          '#updatedAt': 'updatedAt',\n          '#healthScore': 'healthScore',\n          '#ttl': 'ttl',\n        },\n        ExpressionAttributeValues: {\n          ':healthScore': healthScore,\n          ':newUpdatedAtInMs': newUpdatedAtInMs,\n          ':oldUpdatedAtInMs': oldUpdatedAtInMs,\n          ':ttl': ttl,\n        },\n        ConditionExpression: '#updatedAt = :oldUpdatedAtInMs',\n      }\n      return this.ddbClient.update(updateParams).promise()\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"83a4d77dea19c224216d8893e8ce65d462996a3e","contentHash":"46c689a7744c0c054d6918d8a31d8fe3fca81e139b6607eb0a50233b3080b203"}}